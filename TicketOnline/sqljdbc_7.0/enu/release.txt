Release Information
Microsoft JDBC Driver 7.0 for SQL Server
July 2018

------------
INTRODUCTION
------------
This file contains late-breaking or other important information that supplements the Microsoft JDBC 
Driver 7.0 for SQL Server documentation. You should read this file completely before installing 
the JDBC driver.

Your feedback is very important to us and we will strive to respond to your feedback in a timely 
manner. For information about providing feedback by using the JDBC driver blogs and online forums, 
see the Microsoft JDBC Driver 7.0 for SQL Server page at https://aka.ms/mssql-jdbc


------------
INSTALLATION
------------
Instructions for installing the JDBC driver are located in install.txt. Refer to that file for 
information about installing the JDBC driver on Windows, Linux and Mac operating systems.


---------------------------
SUPPORTED OPERATING SYSTEMS
---------------------------
Supported operating systems for Microsoft JDBC Driver 7.0 for SQL Server include:
  Windows Server 2008 SP2
  Windows Server 2008 R2 SP1
  Windows Server 2012
  Windows Server 2012 R2
  Windows Server 2016
  Windows 8
  Windows 8.1
  Windows 10
  Linux
  Mac

The list above is an example of some of the supported operating systems. The JDBC driver is designed 
to work on any operating system that supports the use of a Java Virtual Machine (JVM). 

However, only the latest operating systems of Linux and Mac OS (Ubuntu 18.04, CentOs 7, Suse 12, 
Mac OS 10.13) have been tested for compatibility and support.


----------------
RELEASE CONTENTS
----------------
The Microsoft JDBC Driver 7.0 for SQL Server executable zip or tar file unpacks the following files 
in the specified locations, relative to the selected installation directory:

<installation directory>\sqljdbc_<version>\<language>\install.txt
<installation directory>\sqljdbc_<version>\<language>\release.txt
<installation directory>\sqljdbc_<version>\<language>\license.txt
<installation directory>\sqljdbc_<version>\<language>\thirdpartynotices.txt
<installation directory>\sqljdbc_<version>\<language>\mssql-jdbc-7.0.0.jre8.jar
<installation directory>\sqljdbc_<version>\<language>\mssql-jdbc-7.0.0.jre10.jar
<installation directory>\sqljdbc_<version>\<language>\auth\x86\sqljdbc_auth.dll
<installation directory>\sqljdbc_<version>\<language>\auth\x64\sqljdbc_auth.dll
<installation directory>\sqljdbc_<version>\<language>\samples\<sample files...>
<installation directory>\sqljdbc_<version>\<language>\xa\xa_install.sql
<installation directory>\sqljdbc_<version>\<language>\xa\x86\sqljdbc_xa.dll
<installation directory>\sqljdbc_<version>\<language>\xa\x64\sqljdbc_xa.dll

For detailed information about each component please refer to the online documentation,
Microsoft JDBC Driver for SQL Server Documentation: 
https://msdn.microsoft.com/en-us/library/dn197850(v=sql.10).aspx


-------------
DOCUMENTATION
-------------
This release information, installation instructions, and license terms are included in this package. 
All other documentation may be found online.

Please note that the offline help files have been discontinued. 


---------
JAR FILES
---------
To support backward compatibility and possible upgrade scenarios, the JDBC Driver 7.0 includes 
two JAR class libraries in each installation package:
	mssql-jdbc-7.0.0.jre8.jar
	mssql-jdbc-7.0.0.jre10.jar.


----------------------
FEATURE SPECIFIC FILES
----------------------
Azure Active Directory and Integrated Authentication (on Windows) components are included 
in the 'auth' directory.

JDBC distributed transaction components are included in the 'xa' directory.


--------------------
FEATURE DEPENDENCIES
--------------------
A few features in Microsoft JDBC Driver 7.0 for SQL Server are dependent on external libraries 
as listed below:

1. Using 'Always Encrypted' with Azure Key Vault Provider
   Dependent library: azure-keyvault(version 1.0.0) and adal4j(version 1.6.0)
   
2. Using 'Azure Active Directory Integrated Authentication' on Windows, Linux and Mac Operating Systems
   Dependent library: adal4j(version 1.6.0)

Detailed information on including these dependent libraries in a Standard Java Application 
or a Maven Application can be found here: https://go.microsoft.com/fwlink/?linkid=867575


-------
SAMPLES
-------
Sample applications that demonstrate various features of the JDBC driver are included in the "samples"
directory. For more details about each sample and how to run them, please refer to the online 
documentation.


-----------
CHANGE LIST
-----------
Changes from 6.4.0.0 to 7.0.0.0:
- Added JDK 10 support to the driver, replacing JDK9.
- Updated Maven dependency for Microsoft Azure Active Directory Authentication Library (ADAL4J) for Java 
  to 1.6.0 version of the library.
- Updated the default compliance level in the driver to JDBC 4.2 specifications.
- Added support for spatial datatypes.
- Added new connection property "cancelQueryTimeout" to cancel QueryTimeout on Connection and 
  Statement.
- Added implementation for JDBC 4.3 introduced java.sql.Connection APIs beginRequest() and endRequest().
- Added support back in Azure Key Vault Provider for allowing authentication using a custom method implemented 
  over 'SQLServerKeyVaultAuthenticationCallback' to fetch access token.
- Added support for fetching Data Discovery and Classification information on ResultSet.
- Added support for UTF-8 feature extension.
- Changed Sha1 to CityHash for generating PreparedStatement handle and metadata cache keys.
- Added 'Automatic-Module-Name' manifest entry to resulting jre10 jars such that driver module
  'com.microsoft.sqlserver.jdbc' will be accessible to JDK 10 customers.

Improvements: 
- Improved performance while maintaining JDBC compliance with results from sp_fkeys.
- Introduced a new connection property "useBulkCopyForBatchInsert", which allows the driver to use
  Bulk Copy API when performing a batch insert operation. This feature is only available when performing a 
  batch insert against Azure Data Warehouse and greatly improves the performance of the insert.

Bug Fixes:
- Fixed Blobs becoming unavailable when the ResultSet cursor moves or the ResultSet closes.
- Fixed an issue when attempting to insert an empty or null value into an encrypted column.
- Fixed a misleading error message thrown by the driver when a user doesn't have execute permissions.
- Fixed server side CPU affinity problems when "multiSubnetFailover" is true, caused by uneven connection 
  distribution across NUMA nodes.
- Fixed an issue where the driver wasn't parsing TDS Packets completely to capture exceptions raised 
  inside executed stored procedures.
- Fixed an issue where the driver throws an exception when using Statement APIs followed by query execution 
  with SHOWPLAN_TEXT switched ON.
- Fixed an issue where ResultSetMetaData instances created by a ResultSet that has been closed 
  were not persisting.
- Fixed an issue with PreparedStatement.setBigDecimal() when no scale is passed.
- Fixed an issue with Clobs/NClobs not persisting after ResultSet/Connection closes.
- Fixed the driver disposing user created credentials when using Kerberos Constrained Delegation.
- Fixed an issue with "hostNameInCertificate" when redirected while connected to Azure.
- Fixed intermittent issues with error "Prepared Statement handle not found" when Statement Pooling is enabled.
- Fixed statements throwing SQLServerException instead of java.sql.SQLTimeoutException when the 
  query times out.
- Fixed a conflict with JDBC Compliance where the driver was returning generated columns as SS_IS_COMPUTED 
  instead of IS_GENERATED.
- Fixed an issue with escaped catalog names when retrieving metadata with getSchema().
- Cleaned up socket handling implementation to generalize functionality for different JVMs 
  and simplified the logic for single IP Address case.

  
------------
KNOWN ISSUES
------------
The following are known issues with the Microsoft JDBC Driver 7.0 for SQL Server:

1) PARAMETER METADATA LIMITATIONS WHEN USING SQL SERVER 2008 OR 2008 R2

1.a) PreparedStatement.getParameterMetadata() throws an SQLException when used
with a parametrized MERGE query.

1.b) Parameter metadata for prepared statements does not work with queries having subqueries/joins.


2) CONNECTION DROPPING WITH SQL AZURE

When connecting to SQL Azure, idle connections may be terminated by a network component (such as a 
firewall) after a period of inactivity. To avoid dropping idle connections by a network component, 
the following registry settings (or their non-Windows equivalents) should be set on the operating 
system where the driver is loaded:
           
Registry Setting                                                                   Recommended value
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\KeepAliveTime            30000
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\KeepAliveInterval         1000
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\TcpMaxDataRetransmission  10


3) WHEN USING TVP WITH SQL_VARIANT 

3.a) FOR DATE VALUES

When using TVP to populate a table that contains datetime/smalldatetime/date values stored in sql_variant column, 
calling getDateTime()/getSmallDateTime()/getDate() on ResultSet does not work and throws the following exception:

	java.lang.String cannot be cast to java.sql.Timestamp

Workaround: use getString() or getObject() instead.

3.b) USING TVP WITH SQL_VARIANT FOR NULL VALUES

If you are using TVP to populate a table and send NULL value to sql_variant column type, you will encounter
an exception as inserting NULL value with column type sql_variant in TVP is currently not supported.

